/**
 * 双DeepSeek API客户端
 * 支持云端API和本地API之间的智能切换
 */

import { DeepSeekConfigManager, getDeepSeekConfig, type DeepSeekProvider } from './deepseek-config';

interface ChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface ChatCompletionRequest {
  model?: string;
  messages: ChatMessage[];
  temperature?: number;
  max_tokens?: number;
  stream?: boolean;
}

interface ChatCompletionResponse {
  choices: Array<{
    message: {
      content: string;
      role: string;
    };
    finish_reason: string;
  }>;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
  model?: string;
  provider?: DeepSeekProvider;
}

/**
 * 本地API响应格式 (Ollama格式)
 */
interface LocalChatResponse {
  model: string;
  created_at: string;
  message: {
    role: string;
    content: string;
  };
  done: boolean;
}

/**
 * 双DeepSeek API客户端类
 */
export class DualDeepSeekClient {
  private configManager: DeepSeekConfigManager;

  constructor() {
    this.configManager = getDeepSeekConfig();
  }

  /**
   * 创建聊天完成 - 智能选择API
   */
  async createChatCompletion(request: ChatCompletionRequest): Promise<ChatCompletionResponse> {
    // 自动选择最佳提供商
    const provider = await this.configManager.selectBestProvider();
    
    try {
      if (provider === 'cloud') {
        return await this.createCloudChatCompletion(request);
      } else {
        return await this.createLocalChatCompletion(request);
      }
    } catch (error) {
      console.error(`${provider === 'cloud' ? '云端' : '本地'}API调用失败:`, error);
      
      // 检查是否是超时错误
      const isTimeoutError = error instanceof Error && (
        error.name === 'AbortError' || 
        error.message.includes('aborted') ||
        error.message.includes('timeout')
      );
      
      // 如果是本地API超时且云端API不可用，提供友好的错误信息
      if (provider === 'local' && isTimeoutError && !this.configManager.isCloudAPIAvailable()) {
        throw new Error(`本地API分析超时（可能由于文档复杂度较高）。建议：
1. 等待当前分析完成（本地模型正在处理中）
2. 尝试分析较短的文档片段
3. 配置云端API作为备用方案
4. 检查本地模型性能和资源使用情况`);
      }
      
      // 尝试备用方案（仅当备用方案可用时）
      const fallbackProvider = provider === 'cloud' ? 'local' : 'cloud';
      const canUseFallback = fallbackProvider === 'cloud' 
        ? this.configManager.isCloudAPIAvailable() 
        : await this.configManager.isLocalAPIAvailable();
      
      if (canUseFallback) {
        console.log(`🔄 尝试切换到${fallbackProvider === 'cloud' ? '云端' : '本地'}API...`);
        
        try {
          if (fallbackProvider === 'cloud') {
            return await this.createCloudChatCompletion(request);
          } else {
            return await this.createLocalChatCompletion(request);
          }
        } catch (fallbackError) {
          console.error(`备用API也失败:`, fallbackError);
          throw new Error(`所有DeepSeek API都不可用: 主要错误: ${error instanceof Error ? error.message : error} | 备用错误: ${fallbackError instanceof Error ? fallbackError.message : fallbackError}`);
        }
      } else {
        // 没有可用的备用方案
        if (isTimeoutError) {
          throw new Error(`${provider === 'cloud' ? '云端' : '本地'}API分析超时。这通常是由于文档内容复杂导致的。建议：
1. 尝试分析较短的文档片段
2. 等待片刻后重试
3. ${provider === 'local' ? '配置云端API密钥作为备用' : '配置本地API作为备用'}`);
        } else {
          throw error;
        }
      }
    }
  }

  /**
   * 云端API调用
   */
  private async createCloudChatCompletion(request: ChatCompletionRequest): Promise<ChatCompletionResponse> {
    // 直接获取云端配置，不依赖当前活动提供商
    const config = this.configManager.getConfig();
    
    if (!config.cloudConfig.apiKey) {
      throw new Error('云端API密钥未配置');
    }

    const url = `${config.cloudConfig.baseURL}/chat/completions`;
    
    const requestBody = {
      model: request.model || config.cloudConfig.model,
      messages: request.messages,
      temperature: request.temperature ?? 0.1,
      max_tokens: request.max_tokens ?? 4000,
      stream: request.stream ?? false
    };

    console.log('🌐 调用云端DeepSeek API...');
    const response = await this.makeRequest(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${config.cloudConfig.apiKey}`,
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`云端API错误: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    result.provider = 'cloud';
    console.log('✅ 云端API调用成功');
    
    return result;
  }

  /**
   * 本地API调用 (使用OpenAI兼容格式)
   */
  private async createLocalChatCompletion(request: ChatCompletionRequest): Promise<ChatCompletionResponse> {
    // 确保本地API可用并获取正确的模型名称
    const isAvailable = await this.configManager.isLocalAPIAvailable();
    if (!isAvailable) {
      throw new Error('本地API不可用或没有可用的模型');
    }
    
    // 获取更新后的配置（可能包含自动检测的模型名称）
    const updatedConfig = this.configManager.getActiveConfig();
    
    // 使用新的OpenAI兼容接口
    const url = `${updatedConfig.baseURL}/v1/chat/completions`;
    
    const requestBody = {
      model: request.model || updatedConfig.model, // 使用更新后的模型名称
      messages: request.messages,
      temperature: request.temperature ?? 0.3, // 根据文档建议，学术编辑使用较低的随机性
      max_tokens: request.max_tokens ?? 4000,
      stream: request.stream ?? false
    };

    console.log(`🏠 调用本地API聊天接口 (模型: ${requestBody.model})...`);
    console.log(`📍 API地址: ${url}`);
    console.log(`📝 消息数量: ${requestBody.messages.length}`);
    console.log(`⏳ 本地API调用将等待直到完成，不设置超时限制...`);
    
    // 本地API调用不设置超时，一直等待直到返回结果
    const response = await this.makeLocalRequest(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ollama'
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const errorText = await response.text();
      
      // 如果是404错误，可能是模型名称问题
      if (response.status === 404 || errorText.includes('model') || errorText.includes('not found')) {
        const availableModels = await this.configManager.getAvailableLocalModels();
        
        // 如果有可用模型，尝试使用第一个模型重新调用
        if (availableModels.length > 0) {
          const fallbackModel = availableModels[0];
          console.log(`🔄 尝试使用备用模型: ${fallbackModel}`);
          
          // 更新配置中的模型名称
          this.configManager.updateConfig({
            localConfig: {
              ...this.configManager.getConfig().localConfig,
              model: fallbackModel
            }
          });
          
          // 重新构建请求
          const fallbackRequestBody = {
            ...requestBody,
            model: fallbackModel
          };
          
          const fallbackResponse = await this.makeLocalRequest(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ollama'
            },
            body: JSON.stringify(fallbackRequestBody)
          });
          
          if (fallbackResponse.ok) {
            const result = await fallbackResponse.json();
            
            // OpenAI兼容格式，直接返回，只需添加provider标识
            result.provider = 'local';
            console.log(`✅ 本地API调用成功 (使用模型: ${fallbackModel})`);
            console.log(`📊 响应长度: ${result.choices[0]?.message?.content?.length || 0} 字符`);
            return result;
          }
        }
        
        throw new Error(
          `本地API错误: 模型 "${requestBody.model}" 不存在。` +
          `可用模型: ${availableModels.join(', ') || '无'}`
        );
      }
      
      throw new Error(`本地API错误: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    
    // OpenAI兼容格式，直接返回，只需添加provider标识
    result.provider = 'local';
    console.log('✅ 本地API调用成功');
    console.log(`📊 响应长度: ${result.choices[0]?.message?.content?.length || 0} 字符`);
    
    return result;
  }

  /**
   * 手动切换API提供商
   */
  async switchProvider(provider: DeepSeekProvider): Promise<boolean> {
    try {
      if (provider === 'cloud') {
        if (!this.configManager.isCloudAPIAvailable()) {
          throw new Error('云端API未配置或不可用');
        }
      } else {
        if (!await this.configManager.isLocalAPIAvailable()) {
          throw new Error('本地API不可用');
        }
      }

      this.configManager.setProvider(provider);
      console.log(`✅ 成功切换到${provider === 'cloud' ? '云端' : '本地'}API`);
      return true;
    } catch (error) {
      console.error(`切换到${provider === 'cloud' ? '云端' : '本地'}API失败:`, error);
      return false;
    }
  }

  /**
   * 获取当前提供商
   */
  getCurrentProvider(): DeepSeekProvider {
    return this.configManager.getProvider();
  }

  /**
   * 测试指定提供商的连接
   */
  async testProviderConnection(provider: DeepSeekProvider): Promise<void> {
    if (provider === 'cloud') {
      // 直接获取云端配置进行测试，不依赖当前活动提供商
      const config = this.configManager.getConfig();
      if (!config.cloudConfig.apiKey) {
        throw new Error('云端API密钥未配置');
      }

      const url = `${config.cloudConfig.baseURL}/chat/completions`;
      const requestBody = {
        model: config.cloudConfig.model,
        messages: [{ role: 'user', content: '测试连接' }],
        temperature: 0.1,
        max_tokens: 10,
        stream: false
      };

      const response = await this.makeRequest(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ollama'
        },
        body: JSON.stringify(requestBody)
      }, 'health-check');

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`云端API错误: ${response.status} - ${errorText}`);
      }
    } else {
      // 测试本地API，直接使用本地配置
      const config = this.configManager.getConfig();
      
      // 先检查本地API是否可用
      const isAvailable = await this.configManager.isLocalAPIAvailable();
      if (!isAvailable) {
        throw new Error('本地API不可用或没有可用的模型');
      }
      
      // 修复：确保URL格式正确，避免重复的/v1
      const baseURL = config.localConfig.baseURL;
      const url = baseURL.endsWith('/v1') 
        ? `${baseURL}/chat/completions`
        : `${baseURL}/v1/chat/completions`;
      const requestBody = {
        model: config.localConfig.model,
        messages: [{ role: 'user', content: '测试连接' }],
        temperature: 0.1,
        max_tokens: 10,
        stream: false
      };

      const response = await this.makeRequest(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ollama'
        },
        body: JSON.stringify(requestBody)
      }, 'health-check');

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`本地API错误: ${response.status} - ${errorText}`);
      }
    }
  }

  /**
   * 健康检查 - 使用短超时时间的简化请求
   */
  private async quickHealthCheck(provider: DeepSeekProvider): Promise<void> {
    if (provider === 'cloud') {
      // 直接使用云端配置，不依赖当前活动提供商
      const config = this.configManager.getConfig();
      if (!config.cloudConfig.apiKey) {
        throw new Error('云端API密钥未配置');
      }

      const url = `${config.cloudConfig.baseURL}/chat/completions`;
      const requestBody = {
        model: config.cloudConfig.model,
        messages: [{ role: 'user', content: '测试' }],
        temperature: 0.1,
        max_tokens: 5,
        stream: false
      };

      const response = await this.makeRequest(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ollama'
        },
        body: JSON.stringify(requestBody)
      }, 'health-check'); // 使用健康检查的短超时时间

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`云端API错误: ${response.status} - ${errorText}`);
      }
    } else {
      // 本地API健康检查，直接使用本地配置
      const config = this.configManager.getConfig();
      
      const isAvailable = await this.configManager.isLocalAPIAvailable();
      if (!isAvailable) {
        throw new Error('本地API不可用或没有可用的模型');
      }
      
      const url = `${config.localConfig.baseURL}/v1/chat/completions`;
      const requestBody = {
        model: config.localConfig.model,
        messages: [{ role: 'user', content: '测试' }],
        temperature: 0.1,
        max_tokens: 10,
        stream: false
      };

      const response = await this.makeRequest(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ollama'
        },
        body: JSON.stringify(requestBody)
      }, 'health-check'); // 使用健康检查的短超时时间

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`本地API错误: ${response.status} - ${errorText}`);
      }
    }
  }

  /**
   * 健康检查
   */
  async healthCheck(): Promise<{
    cloud: { available: boolean; error?: string };
    local: { available: boolean; error?: string };
    current: DeepSeekProvider;
  }> {
    const result = {
      cloud: { available: false, error: undefined as string | undefined },
      local: { available: false, error: undefined as string | undefined },
      current: this.configManager.getProvider()
    };

    // 检查云端API
    try {
      if (this.configManager.isCloudAPIAvailable()) {
        await this.quickHealthCheck('cloud');
        result.cloud.available = true;
      } else {
        result.cloud.error = 'API密钥未配置';
      }
    } catch (error) {
      result.cloud.error = error instanceof Error ? error.message : '未知错误';
    }

    // 检查本地API
    try {
      await this.quickHealthCheck('local');
      result.local.available = true;
    } catch (error) {
      result.local.error = error instanceof Error ? error.message : '未知错误';
    }

    return result;
  }

  /**
   * 获取状态报告
   */
  async getStatusReport(): Promise<{
    currentProvider: DeepSeekProvider;
    cloudStatus: { available: boolean; configured: boolean };
    localStatus: { available: boolean; configured: boolean };
    recommendations: string[];
  }> {
    return await this.configManager.getStatusReport();
  }

  /**
   * 生成文本嵌入向量 - 使用本地算法
   * 注意：目前两种API都没有专门的embedding服务，继续使用本地算法
   */
  async createEmbedding(input: string | string[]): Promise<number[][]> {
    const texts = Array.isArray(input) ? input : [input];
    const embeddings: number[][] = [];

    for (const text of texts) {
      const embedding = this.generateAdvancedEmbedding(text);
      embeddings.push(embedding);
    }

    return embeddings;
  }

  /**
   * 改进的本地嵌入向量生成算法
   * 基于语义特征和统计特征的混合方法
   */
  private generateAdvancedEmbedding(text: string): number[] {
    const dimension = 1024;
    const embedding = new Array(dimension).fill(0);
    
    // 1. 基础文本特征
    const textFeatures = this.extractTextFeatures(text);
    
    // 2. 语义特征映射
    const semanticFeatures = this.extractSemanticFeatures(text);
    
    // 3. 领域特征
    const domainFeatures = this.extractDomainFeatures(text);
    
    // 4. 统计特征
    const statisticalFeatures = this.extractStatisticalFeatures(text);
    
    // 5. 组合特征到向量空间
    for (let i = 0; i < dimension; i++) {
      const featureIndex = i % 4;
      let value = 0;
      
      switch (featureIndex) {
        case 0:
          value = textFeatures[i % textFeatures.length];
          break;
        case 1:
          value = semanticFeatures[i % semanticFeatures.length];
          break;
        case 2:
          value = domainFeatures[i % domainFeatures.length];
          break;
        case 3:
          value = statisticalFeatures[i % statisticalFeatures.length];
          break;
      }
      
      const positionWeight = Math.sin(i / dimension * Math.PI);
      const noise = (Math.random() - 0.5) * 0.1;
      
      embedding[i] = value * positionWeight + noise;
    }
    
    return this.normalizeVector(embedding);
  }

  private extractTextFeatures(text: string): number[] {
    const features: number[] = [];
    const normalizedText = text.toLowerCase();
    
    const charFreq: Record<string, number> = {};
    for (const char of normalizedText) {
      charFreq[char] = (charFreq[char] || 0) + 1;
    }
    
    for (let i = 0; i < 256; i++) {
      const char = String.fromCharCode(i);
      features.push((charFreq[char] || 0) / text.length);
    }
    
    return features;
  }

  private extractSemanticFeatures(text: string): number[] {
    const features: number[] = [];
    
    const keywordWeights: Record<string, number> = {
      '研究': 0.9, '分析': 0.8, '实验': 0.85, '理论': 0.8, '方法': 0.7,
      '结果': 0.75, '结论': 0.8, '数据': 0.7, '模型': 0.75, '算法': 0.8,
      '量子': 0.95, '分子': 0.9, '蛋白质': 0.9, '基因': 0.9, '细胞': 0.85,
      '物理': 0.8, '化学': 0.8, '生物': 0.8, '医学': 0.8, '工程': 0.75,
      '增强': 0.6, '减少': 0.6, '提高': 0.65, '改善': 0.65, '优化': 0.7,
      '控制': 0.65, '调节': 0.6, '影响': 0.6, '促进': 0.6, '抑制': 0.6
    };
    
    for (let i = 0; i < 256; i++) {
      let semanticScore = 0;
      for (const [keyword, weight] of Object.entries(keywordWeights)) {
        if (text.includes(keyword)) {
          semanticScore += weight * (text.split(keyword).length - 1) / text.length;
        }
      }
      features.push(Math.tanh(semanticScore + Math.sin(i * 0.1)));
    }
    
    return features;
  }

  private extractDomainFeatures(text: string): number[] {
    const features: number[] = [];
    
    const domainPatterns = {
      academic: /学术|研究|论文|期刊|会议|引用/g,
      medical: /医学|疾病|治疗|药物|临床|病理/g,
      technical: /技术|工程|算法|系统|架构|开发/g,
      legal: /法律|条例|规定|合同|协议|法规/g,
      business: /商业|市场|销售|管理|策略|客户/g,
      science: /科学|实验|数据|假设|验证|观察/g
    };
    
    for (let i = 0; i < 256; i++) {
      let domainScore = 0;
      for (const pattern of Object.values(domainPatterns)) {
        const matches = text.match(pattern);
        if (matches) {
          domainScore += matches.length / text.length;
        }
      }
      features.push(domainScore + Math.cos(i * 0.05));
    }
    
    return features;
  }

  private extractStatisticalFeatures(text: string): number[] {
    const features: number[] = [];
    
    const length = text.length;
    const words = text.split(/\s+/).length;
    const sentences = text.split(/[。！？.!?]/).length;
    const avgWordLength = words > 0 ? length / words : 0;
    const avgSentenceLength = sentences > 0 ? words / sentences : 0;
    
    for (let i = 0; i < 256; i++) {
      let feature = 0;
      switch (i % 5) {
        case 0:
          feature = length / 1000;
          break;
        case 1:
          feature = words / 100;
          break;
        case 2:
          feature = sentences / 10;
          break;
        case 3:
          feature = avgWordLength / 10;
          break;
        case 4:
          feature = avgSentenceLength / 20;
          break;
      }
      features.push(Math.tanh(feature + Math.random() * 0.1));
    }
    
    return features;
  }

  private normalizeVector(vector: number[]): number[] {
    const magnitude = Math.sqrt(vector.reduce((sum, val) => sum + val * val, 0));
    return magnitude > 0 ? vector.map(val => val / magnitude) : vector;
  }

  /**
   * 发起本地API请求 - 不设置超时，一直等待直到返回结果
   */
  private async makeLocalRequest(url: string, options: RequestInit): Promise<Response> {
    console.log(`🔄 发起本地API请求，无超时限制...`);

    try {
      const response = await fetch(url, options);
      return response;
    } catch (error) {
      throw error;
    }
  }

  /**
   * 发起HTTP请求
   */
  private async makeRequest(url: string, options: RequestInit, taskType: 'default' | 'document-analysis' | 'health-check' = 'default'): Promise<Response> {
    const timeout = this.configManager.getTimeoutForTask(taskType);
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);

    console.log(`🔄 发起${taskType === 'document-analysis' ? '文档分析' : taskType === 'health-check' ? '健康检查' : ''}请求 (超时: ${timeout/1000}秒)`);

    try {
      const response = await fetch(url, {
        ...options,
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      return response;
    } catch (error) {
      clearTimeout(timeoutId);
      throw error;
    }
  }
}

/**
 * 创建双DeepSeek客户端实例
 */
export function createDualDeepSeekClient(): DualDeepSeekClient {
  return new DualDeepSeekClient();
}

/**
 * 全局客户端实例
 */
let globalClient: DualDeepSeekClient | null = null;

/**
 * 获取全局客户端实例
 * 支持强制刷新配置
 */
export function getDualDeepSeekClient(forceRefresh: boolean = false): DualDeepSeekClient {
  if (!globalClient || forceRefresh) {
    globalClient = new DualDeepSeekClient();
  }
  return globalClient;
}

/**
 * 清除全局客户端缓存
 * 在配置更新后调用，确保使用新配置
 */
export function clearDualDeepSeekClient(): void {
  globalClient = null;
} 